plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.4.9'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.RecipeCode'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}


tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


repositories {
	mavenCentral()
}

dependencies {
	implementation("co.elastic.clients:elasticsearch-java:8.14.3")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	annotationProcessor 'org.projectlombok:lombok'
	// 서버 실행안되면 providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat' 주석처리 후
    // 그 밑에줄에 있는 implementation 'org.springframework.boot:spring-boot-starter-tomcat' 주석 해제
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
//	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//    TODO: junit 테스트 시 lombok 추가
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'

	//    TODO: jsp 설정: spring boot 에는 제공하지 않음, 수작업으로 설정
	implementation group: 'org.glassfish.web', name: 'jakarta.servlet.jsp.jstl', version: '2.0.0'
	implementation "org.apache.tomcat.embed:tomcat-embed-jasper"

	//    TODO: dto , entity 변환 라이브러리(롬북보다 순서상 밑에 위치해야 정상작동함)
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// TODO: querydsl jakarta 의존성 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // TODO: spring security 라이브러리 추가(암호화도 포함됩니다.)
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// TODO: spring security tag 라이브러리 추가(JSP 사용 시 추가합니다.)
	implementation 'org.springframework.security:spring-security-taglibs'
	// TODO: OAuth2 Client (구글/카카오 소셜 로그인)
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// TODO: es 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

	//TODO: 엘라스틱서치더미데이터 작성기
	implementation "net.datafaker:datafaker:2.2.2"
	implementation "org.springframework.boot:spring-boot-starter-data-elasticsearch"

	// TODO: 계정인증용 메일 추가
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// TODO: fn jstl 추가
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.1'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

